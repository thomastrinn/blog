<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Blog</title>
    <link>https://thomastrinn.github.io/blog/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Apr 2022 09:23:22 +0200</lastBuildDate><atom:link href="https://thomastrinn.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Home Lab Server: choose OS 2.0</title>
      <link>https://thomastrinn.github.io/blog/posts/home-lab-server-setup-2/</link>
      <pubDate>Sun, 24 Apr 2022 09:23:22 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/home-lab-server-setup-2/</guid>
      <description>Az év elején vágtam bele a home lab server projektbe és operációs rendszernek az Ubuntu Server-t választottam. A döntésről és beállításokról írt bejegyzésemben többek közt több lehetséges operációs rendszert is felsoroltam, amelyen elgondolkoztam, hogy használhatnám, de az ubuntu popularitása és egyszerű telepítése miatt végül azokat elvetettem.
Néhány hónap elteltével azonban elkezdett motoszkálni a fejemben, hogy nekem tényleg szükségem van-e az ubuntura, kell-e nekem a sok csomag amivel jön, kell-e nekem a fix verzió, kell-e nekem a régebbi kernel (és nem egy újabb).</description>
    </item>
    
    <item>
      <title>Swap</title>
      <link>https://thomastrinn.github.io/blog/posts/swap/</link>
      <pubDate>Sat, 23 Apr 2022 15:29:52 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/swap/</guid>
      <description>Szükség van-e swap-ra? Erre a kérdésre kerestem a választ és találtam egy jó cikket, amely ezt a témát járja körbe: Linux Performance: Why You Should Almost Always Add Swap Space
Az alábbiakban leírom, hogyan tudunk swap fájlt létrehozni és milyen finomhangolási lehetőségeink vannak.
Swap fájl létrehozása és használata   Swapfájl létrehozása. Például 512 mb-os swapfájl létrehozása:
sudo dd if=/dev/zero of=/swapfile bs=1M count=512 status=progress A dd a coreutils GNU csomag része.</description>
    </item>
    
    <item>
      <title>Mounting a File System</title>
      <link>https://thomastrinn.github.io/blog/posts/mounting-a-file-system/</link>
      <pubDate>Fri, 22 Apr 2022 11:30:44 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/mounting-a-file-system/</guid>
      <description>Linux és UNIX operációs rendszerek esetén a mount parancs segítségével csatolhatunk fel fájlrendszereket. A felcsatolás helyét mount point-nak nevezik és a könyvtár struktúra egy tetszőlegesen választott helye.
Az unmount parancs segítségével pedig lecsatolható az adott fájlrendszer.
Fájlrendszer csatolása Az elérhető eszközök listázására használhatjuk az fdisk parancsot:
sudo fdisk -l Ezzel részletes információkat kapunk az eszközökről és a partíciókról, illetve milyen fájlrendszerűek a partíciók.
Adott fájlrendszer csatolásának módja a mount paranccsal:</description>
    </item>
    
    <item>
      <title>Simplify Remote Access with custom SSH Connection Configs</title>
      <link>https://thomastrinn.github.io/blog/posts/simplify-remote-access-with-custom-ssh-connection-configs/</link>
      <pubDate>Thu, 21 Apr 2022 11:29:03 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/simplify-remote-access-with-custom-ssh-connection-configs/</guid>
      <description>A korábbi SSH túl sok autentikációs próbák hiba bejegyzést követően tudomást szereztem arról, hogy egy kapcsolódáshoz tartozó speciális beállításokat egy config fájlban is meg lehet adni, ami nagyban megkönnyíti a dolgomat, mert nem kell megjegyeznem a beállításokat.
OpenSSH client-side configuration file: ~/.ssh/config Alap esetben az SSH config fájl nem feltétlenül létezik, ezért létre kell hozni úgy, hogy csak az adott felhasználó írhassa és olvashassa:
touch ~/.ssh/config &amp;amp;&amp;amp; chmod 600 ~/.ssh/config A fájl struktúrája:</description>
    </item>
    
    <item>
      <title>SSH returns &#39;Too Many Authentication Failures&#39; error</title>
      <link>https://thomastrinn.github.io/blog/posts/ssh-too-many-authentication-failures/</link>
      <pubDate>Thu, 10 Mar 2022 19:47:52 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/ssh-too-many-authentication-failures/</guid>
      <description>A mai nap, amikor be akartam ssh-zni egy szerverre, azt a szerver a következő hiba üzenettel utasította vissza:
Received disconnect from &amp;lt;server&amp;gt;: 2: Too many authentication failures for username Az ssh-hoz autentikációnak jelszót kellett volna megadnom, de addig el se jutottam. Az alábbi egyszerű módon kezdeményeztem a kapcsolódást:
ssh username@&amp;lt;server&amp;gt; Megnéztem a -v és -vvv kapcsolók segítségével, hogy mi is történik, hol akad el a folyamat, de számomra semmi gyanúsat nem találtam.</description>
    </item>
    
    <item>
      <title>Docker Image Update Notifier</title>
      <link>https://thomastrinn.github.io/blog/posts/diun/</link>
      <pubDate>Thu, 10 Mar 2022 16:30:23 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/diun/</guid>
      <description>A Diun - Docker Image Update Notifier, ahogy neve is sugallja, értesít bennünk arról, ha van újabb verziójú docker image.
Telepítés docker image-gel A diun-t úgy állítottam be, hogy minden használatban lévő docker image-emet figyelje és 6 óránként ellenőrizze, hogy vannak-e újabb verziójúak. Értesítés küldésre egy saját script-et írtam, ami a Simplepush-on keresztül küld értesítést az okos telefonomra.
Az docker-compose.yml fájl a diun service-szel:
version: &amp;#34;3.8&amp;#34;  services:  diun:  image: crazymax/diun:latest  container_name: diun  restart: always  command: serve  volumes:  - &amp;#34;.</description>
    </item>
    
    <item>
      <title>Simplepush</title>
      <link>https://thomastrinn.github.io/blog/posts/simplepush/</link>
      <pubDate>Tue, 08 Mar 2022 18:47:37 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/simplepush/</guid>
      <description>Hosszan kerestem egy olyan ingyenes szolgáltatást, ami egyszerű módon lehetővé teszi számomra, hogy push értesítéseket küldhessek okos telefonomra.
A célom ezzel, hogy a home-lab server-em tudjon fontos eseményekről jelzést küldeni számomra.
A szolgáltatás amit találtam a Simplepush. Ingyenesen limitált 100 push értesítés küldésre havonta, de ez nekem elegendő is.
A szolgáltatás mellet ingyenesen android és ios alkalmazást is adnak.
Értesítés küldése POST request-vel történik, így curl paranccsal is elvégezhető, részletek az api dokumentációjában találhatók.</description>
    </item>
    
    <item>
      <title>Set Up File Server With Samba</title>
      <link>https://thomastrinn.github.io/blog/posts/set-up-file-server-with-samba/</link>
      <pubDate>Mon, 07 Mar 2022 19:52:44 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/set-up-file-server-with-samba/</guid>
      <description>A Samba segítségével fájl megosztást lehet lehetővé tenni Linux, Windows és MacOS operációs rendszerek számára.
Meglepetésemre a telepítés és beállítás sokkal egyszerűbb volt, mint gondoltam.
Az ubuntu oldalán található két leírás nagy segítséget adott:
  Tutorial: Install and Configure Samba
  Server - Docs: File Server
  Nincs más teendő, mint telepíteni a samba csomagot:
sudo apt install samba A beállításokat pedig az /etc/samba/smb.conf fájlban tehetjük meg.</description>
    </item>
    
    <item>
      <title>Home Lab Server Setup</title>
      <link>https://thomastrinn.github.io/blog/posts/home-lab-server-setup/</link>
      <pubDate>Thu, 03 Mar 2022 18:15:00 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/home-lab-server-setup/</guid>
      <description>A home lab server operációs rendszerének némi kutakodás után az ubuntu server-t választottam, mivel linux szerverek esetén túlnyomórészt ezt használják.
A kutakodás során az alábbiakat derítettem ki:
  A debian a legstabilabb és legbiztonságosabb, de hátránya hogy mindig elavult alkalmazásokat támogat, az előbbiek érdekében.
  Az ubuntu (debian alapú) a legnépszerűbb és legelterjedtebben használt, biztonságos és stabil, meghatározott release ciklussal és support-tal.
  Az arch linux nem igen kerül elő mint server operációs rendszer, de vannak vállalkozó szellemű cégek.</description>
    </item>
    
    <item>
      <title>First Mini Home Lab Server - The Metal</title>
      <link>https://thomastrinn.github.io/blog/posts/first-mini-home-lab-server-metal/</link>
      <pubDate>Wed, 09 Feb 2022 17:23:30 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/first-mini-home-lab-server-metal/</guid>
      <description>Hosszas fontolgatás után úgy döntöttem eljött az ideje a Raspberry Pi mini számítógép kalandozásaim után, hogy egy erősebb hardware-t keressek, amit Home Lab Server-nek használhatok.
Elvárások:
  Kicsi, kompakt számítógép ház
  Csendes
  M.2 NVMe SSD támogatás
  2,5&amp;rsquo;&amp;rsquo;&amp;rsquo; HDD elférjen a számítógép házban
  Több magos CPU
  Jó teljesítmény, alacsony fogyasztás
  Egy hosszas kutakodást követően a Minisforum UM340 Mini PC-re esett a választásom.</description>
    </item>
    
    <item>
      <title>Magic Wormhole: Secure File Transfer</title>
      <link>https://thomastrinn.github.io/blog/posts/magic-wormhole-secure-file-transfer/</link>
      <pubDate>Wed, 12 Jan 2022 17:04:32 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/magic-wormhole-secure-file-transfer/</guid>
      <description>The notion of a “magic wormhole” comes from the image of two distant wizards speaking the same enchanted phrase at the same time, and causing a mystical connection to pop into existence between them. The wizards then throw books into the wormhole and they fall out the other side. Transferring files securely should be that easy. &amp;ndash; magic-worhole official website
 A wormhole lehetővé teszi tetszőleges méretű fájlok és könyvtárak (vagy rövid szövegrészek) átjutását egyik számítógépről a másikra.</description>
    </item>
    
    <item>
      <title>Create a Multi-ISO Bootable Flash Drive</title>
      <link>https://thomastrinn.github.io/blog/posts/create-a-multi-iso-bootable-flash-drive/</link>
      <pubDate>Thu, 30 Dec 2021 18:23:02 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/create-a-multi-iso-bootable-flash-drive/</guid>
      <description>A Ventoy egy open source eszköz, amely segítségével boot-olható USB drive-ot készíthetünk ISO/WIM/IMG/VHD(x)/EFI fájlok számára.
Ventoy használata  Töltsük le vagy telepítsük a Ventoy programot. A ventoygui alkalmazás indítása után egy egyszerű felülettel találkozunk:  kiválaszthatjuk az eszközt, amelyre fel kívánjuk telepíteni megadhatjuk, hogy MBR vagy GPT partíciós stílust akarunk-e használni megadhatjuk, a ventoy partíció méretét.   A beállítások után telepíthetjük a ventoy-t, vagy ha már korábban telepítettük, akkor frissíthetjük.</description>
    </item>
    
    <item>
      <title>Encrypted Data Storage</title>
      <link>https://thomastrinn.github.io/blog/posts/encrypted-data-storage/</link>
      <pubDate>Thu, 30 Dec 2021 17:23:46 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/encrypted-data-storage/</guid>
      <description>Olyan open source szoftvereket gyűjtöttem össze, amelyek fájl titkosítást tesznek lehetővé, illetve cloud szolgáltatás esetén end-to-end encryption-t támogatnak.
7-Zip A 7-Zip egy fájl arhiváló, amely jelszóval védett archív fájl létrehozását is lehetővé teszi.
Hat.sh A Hat.sh egy webes alkalmazás, amely a böngészőben fájl titkosítást tesz lehetővé.
LUKS - Linux Unified Key Setup A LUKS segítségével titkosított partíciót hozhatunk létre.
VeraCrypt A VeraCrypt egy disk encryption alkalmazás, amely képes meglevő partíciót titkosítani, illetve virtuális titkosított meghajtót létrehozni.</description>
    </item>
    
    <item>
      <title>Create a Blog With Hugo and Hosting on GitHub Pages</title>
      <link>https://thomastrinn.github.io/blog/posts/create-a-blog-with-hugo-and-hosting-on-github-pages/</link>
      <pubDate>Tue, 28 Dec 2021 08:57:06 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/create-a-blog-with-hugo-and-hosting-on-github-pages/</guid>
      <description>Jelen bejegyzésben megmutatom, hogyan hoztam létre ezt a blog oldalt.
Áttekintés Az oldalt a Hugo nevű statikus oldal generálóval készítem, publikusan elérhetővé pedig a GitHub Pages segítségével teszem.
GitHub-on két repository-t készítettem, az egyik tartalmazza az oldal forráskódját és a tartalmakat, a másik pedig a generált oldalt.
Blog létrehozása Hugo-val Hugo telepítése A telepítés igen egyszerű, a hivatalos útmutató alapján bármilyen operációs rendszerre fel tudjuk telepíteni.
Blog oldal létrehozása A blog oldal létrehozása a hugo programmal:</description>
    </item>
    
    <item>
      <title>Using Zram With Raspberry Pi</title>
      <link>https://thomastrinn.github.io/blog/posts/using-zram-with-raspberry-pi/</link>
      <pubDate>Fri, 24 Dec 2021 13:49:18 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/using-zram-with-raspberry-pi/</guid>
      <description>A Raspberry Pi 3B+ 1 GiB memóriája előfordul, hogy kevésnek bizonyul, illetve a swap használata az SD kártyán lassúvá teheti a rendszerünket. Ennek orvoslásaként használható a zram.
Mi is az a zram?  zram, formerly called compcache, is a Linux kernel module for creating a compressed block device in RAM, i.e. a RAM disk with on-the-fly disk compression. The block device created with zram can then be used for swap or as general-purpose RAM disk.</description>
    </item>
    
    <item>
      <title>Private and Public Key Authentication</title>
      <link>https://thomastrinn.github.io/blog/posts/private-and-public-key-authentication/</link>
      <pubDate>Thu, 23 Dec 2021 18:49:33 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/private-and-public-key-authentication/</guid>
      <description>Szerverre ssh-val történő belépéshez felhasználónév és jelszó megadás helyett használhatunk ssh kulcsot is.
SSH kulcsot generálni az ssh-keygen programmal tudunk:
ssh-keygen -t rsa -b 4096 -C &amp;#34;your_email@example.com&amp;#34; -f ~/.ssh/some-name A fenti paranccsal 4096 bit-es RSA kulcsot hozunk létre, a -C kapcsolóval megjegyzést fűzünk a kulcshoz a könnyebb beazonosítás végett, ami lehet az e-mail címünk, de nem kötelező, továbbá az -f kapcsolóval megadjuk a kulcs nevét (nem kötelező megadni, ha nem adjuk meg, akkor generálás közben kéri és van alapértelmezett értéke).</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 10 Server Monitoring Part 6 - Grafana Alerts</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-10-server-monitoring-part-06-grafana-alerts/</link>
      <pubDate>Thu, 23 Dec 2021 12:27:41 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-10-server-monitoring-part-06-grafana-alerts/</guid>
      <description>Riasztások segítségével értesülhetünk arról, ha valami probléma lépett fel a rendszerünkben.
A Grafana lehetőséget biztosít riasztások létrehozására. A hivatalos dokumentáció segítségével könnyedén létre tudtam hozni riasztásokat. Úgynevezett alert rule-t kell definiálni, ami áll egy query-ből, ami meghatározza azt az értéket, amit figyelni kívánunk és áll egy condition-ből, amiben a feltételt határozhatjuk meg a riasztáshoz.
Ahhoz, hogy a riasztásról értesülhessek a Gotify message server-t használtam. Ez biztosít egy web-es felületet a message-ek megjelenítésére, illetve van android alkalmazás is hozzá.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 9: Server Monitoring Part 5 - Container Logs</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-09-server-monitoring-part-05-container-logs/</link>
      <pubDate>Sun, 05 Dec 2021 16:23:52 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-09-server-monitoring-part-05-container-logs/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a docker container logok gyűjtésével és megjelenítésével foglalkozom.
Docker container logok gyűjtése A container logok helye: /var/lib/docker/&amp;lt;container-id&amp;gt;/&amp;lt;container-id&amp;gt;-json.log
Ahol a &amp;lt;container-id&amp;gt; a docker container-ek egyedi azonosítója.
A docker container logok gyűjtéséhez a Promtail service számára a /var/lib/docker könyvtárat kell volume-ként becsatolni:
 promtail:  image: grafana/promtail:latest  container_name: promtail  command: -config.file=/etc/promtail/config.yml  volumes:  - ./promtail/promtail-config.yml:/etc/promtail/config.yml  - /var/log:/var/log:ro  - /var/lib/docker/:/var/lib/docker:ro  restart: unless-stopped Így a promtail container eléri a host docker log-jait és most már be tudjuk állítani, hogy a promtail a /var/lib/docker/containers/*/*log fájlokat figyelve a logokat elküldje a Loki-nak.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 8: Server Monitoring Part 4 - System Logs</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-08-server-monitoring-part-04-system-logs/</link>
      <pubDate>Sun, 05 Dec 2021 09:30:06 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-08-server-monitoring-part-04-system-logs/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a linux host system log gyűjtésével és megjelenítésével foglalkozom.
System log gyűjtése A system log gyűjtéséhez a Promtail service számára a linux host /var/log könyvtárát kell volume-ként becsatolni. Az eredeti docker-compose promtail service ezzel kiegészítve az alábbi:
 promtail:  image: grafana/promtail:latest  container_name: promtail  command: -config.file=/etc/promtail/config.yml  volumes:  - ./promtail/promtail-config.yml:/etc/promtail/config.yml  - /var/log:/var/log:ro  restart: unless-stopped Így a promtail container eléri a host system log-jait és most már be tudjuk állítani, hogy a promtail a /var/log könyvtárat figyelve a logokat elküldje a Loki-nak.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 7: Server Monitoring Part 3 - Container Metrics</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-07-server-monitoring-part-03-container-metrics/</link>
      <pubDate>Sat, 04 Dec 2021 11:17:00 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-07-server-monitoring-part-03-container-metrics/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a futó docker containerek erőforrás igényeit szeretném kinyerni és megjeleníteni.
Docker daemon Van lehetőség közvetlenül a docker daemon-ból kinyerni metric adatokat, a hivatalos docker dokumentációban találtam leírást hozzá. Jelenleg még fejlesztés alatt van, így csak experimental módban lehet használni.
A /etc/docker/daemon.json fájlban adható meg a metric végpont engedélyezése:
{  &amp;#34;metrics-addr&amp;#34; : &amp;#34;127.0.0.1:9323&amp;#34;,  &amp;#34;experimental&amp;#34; : true } Ahhoz, hogy érvényesüljön a beállítás újra kell indítani a docker daemon-t:</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 6: Server Monitoring Part 2 - System Metrics</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-06-server-monitoring-part-02-system-metrics/</link>
      <pubDate>Mon, 29 Nov 2021 19:16:40 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-06-server-monitoring-part-02-system-metrics/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a hardware és os metric adatok gyűjtésével és megjelenítésével foglalkozom.
System metric adatok elérése A Prometheus egyik hivatalos metric exporter-je a Node exporter , amely pont megfelel céljaim számára.
A node exporter futtatható docker container-ként és docker-compose service-ként az alábbi módon hoztam létre:
 node_exporter:  image: quay.io/prometheus/node-exporter:latest  container_name: node_exporter  command: --path.rootfs=/host  pid: host  ports:  - &amp;#34;9100:9100&amp;#34;  volumes:  - /:/host:ro,rslave  restart: unless-stopped amelyet a grafana-stack docker-compose.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 5: Server Monitoring Part 1 - Grafana Stack</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-05-server-monitoring-part-01-grafana-stack/</link>
      <pubDate>Mon, 29 Nov 2021 19:14:12 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-05-server-monitoring-part-01-grafana-stack/</guid>
      <description>A Raspberry Pi server monitorozását a Grafana Labs eszközeivel kívánom megoldani.
A célom a rendszer és a docker container-ek monitorozása, az adatok megjelenítése grafikonokon - úgynevezett dashboard-on -, a rendszer és docker container logok egységes kezelése, riasztások küldése nem kívánt állapotok esetén.
A Grafana Labs főbb eszközei:
 Grafana: metric adat vizualizáló, kereső és riszasztás kezelő rendszer Prometheus: metric adatokat gyűjtő és tároló rendszer Loki: log aggregáló rendszer Promtail: agent, amely logokat továbbít Loki-nak.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 4: Docker Container Auto Update</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-04-docker-container-auto-update/</link>
      <pubDate>Mon, 22 Nov 2021 17:09:29 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-04-docker-container-auto-update/</guid>
      <description>Docker container-ben futó alkalmazásokat nem tudunk update-elni, mivel a docker container-ek immutable-ek. Ahhoz, hogy az alkalmazás újabb verzióját használhassuk szükségünk van egy docker image-re, amely tartalmazza az új verziót és a container-ünket törölnünk kell, majd az új image-el újra létre kell hoznunk.
Watchtower A watchtower segítségével automatizálhatjuk a docker container-jeink update-elési folyamatát.
A watchtower monitorozza a futó Docker container-jeinket, hogy a container-ek alapjáúl szolgáló image-k változtak-e. Ha úgy érzékeli, hogy volt változás, akkor automatikusan újraindítja az érintett containereket az új image-ekre épülve, megtartva az eredeti beállításokat (portok, stb.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 3: Install docker and docker-compose</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-03-install-docker/</link>
      <pubDate>Sun, 21 Nov 2021 16:29:28 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-03-install-docker/</guid>
      <description>Előfeltételek A docker telepítése előtt a Raspberry Pi 3 Model B+ esetében szükséges az alábbi cgroups beállításokkal kiegészíteni a /boot/cmdline.txt fájlt:
cgroup_enable=memory cgroup_memory=1 cgroup_enable=cpuset swapaccount=1 A módosítást követően újra kell indítsuk a pi-t, hogy érvényesüljenek a kernel módosítások:
sudo reboot Újraindulást követően a sudo cat /proc/cgroups eredményeként látnunk kell a cpuset és memory-t a listán.
Docker telepítése Követve a hivatalos dokumentációt Raspbian esetén a convenience script segítségével telepíthetjük a Docker Engine-t.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 2: Auto update</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-02-auto-update/</link>
      <pubDate>Sun, 21 Nov 2021 14:04:04 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-02-auto-update/</guid>
      <description>Debian alapú rendszerek esetén az unattended-upgrades csomag biztosít lehetőséget update-ek automatikus futtatására.
Telepítés sudo apt-get install unattended-upgrades apt-listchanges -y Beállítások Az unattended-upgrades beállításait az /etc/apt/apt.conf.d/50unattended-upgrades fájl tartalmazza.
Lehetőségünk van beállítani az automatikus újraindítást, ha az update után az szükséges:
Unattended-Upgrade::Automatic-Reboot &amp;#34;true&amp;#34;; Unattended-Upgrade::Automatic-Reboot-Time &amp;#34;03:00&amp;#34;; Továbbá lehetőségünk van e-mail értesítést is küldeni az alábbi két sorral:
Unattended-Upgrade::Mail &amp;#34;user@example.com&amp;#34;; Unattended-Upgrade::MailReport &amp;#34;on-change&amp;#34;; De ez csak akkor fog működni, ha a rendszer tud e-mail-t küldeni, ehhez pedig egy olyan tool-ra van szükségünk, ami a mailx package-t támogatja.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 1: Setup</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-01-setup/</link>
      <pubDate>Tue, 09 Nov 2021 20:08:03 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-01-setup/</guid>
      <description>Az OS telepítése A célom hogy headless módon használhassam a pi-t, így nincs szükségem desktop enviromentre. Követve a hivatalos getting started leírást, az OS-t a Raspberry Pi Imager segítségével telepítem.
Miután az SD kártyát a számítógépemhez csatlakoztattam az RP Imager-ben OS-ként nem a default beállítást választottam, hanem az other opció alatt elérhető DE nélküli változatot (ebből két verzió létezik: Lite és Full, az utóbbit választottam).
Az Advanced Options segítségével be tudtam állítani a wifi-t, a locale beállításokat és az ssh-t.</description>
    </item>
    
    <item>
      <title>Get Started With Docker Compose</title>
      <link>https://thomastrinn.github.io/blog/posts/get-started-with-docker-compose/</link>
      <pubDate>Fri, 06 Aug 2021 08:23:05 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/get-started-with-docker-compose/</guid>
      <description>A Docker Compose egy olyan eszköz, aminek segítségével definiálni és elindítani tudunk több docker container-t.
Docker Compose fájlok A docker-compose.yml fájl tartalmazza azon service-eket amelyeket docker container-ként akarunk futtatni.
A .env fájl nem kötelező, de ha használjuk, akkor környezeti változókat tartalmazhat, amelyek a docker-compose.yml fájlban behivatkozhatóak. További részletek itt találhatóak.
Rendelkezésre állnak előre definiált környezeti változók, amelyekkel finomhangolhatjuk a Docker Compose működését. Az egyik ilyen környezeti változó a COMPOSE_PROJECT_NAME, amellyel a projektünk nevét adhatjuk meg, amit a docker-compose utána felhasznál prefixként a létrehozandó container-ek, volume-ok, network-ok nevéhez.</description>
    </item>
    
    <item>
      <title>Elasticsearch in Docker</title>
      <link>https://thomastrinn.github.io/blog/posts/elasticsearch-in-docker/</link>
      <pubDate>Fri, 06 Aug 2021 08:09:59 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/elasticsearch-in-docker/</guid>
      <description>Az alábbi docker-compose.yml fájl egy elasticsearch és egy elastickibana service-t indít el.
version: &amp;#39;3&amp;#39;  services:  elasticsearch:  image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3  container_name: ebla_elasticsearch  environment:  - xpack.security.enabled=false  - discovery.type=single-node  ulimits:  memlock:  soft: -1  hard: -1  nofile:  soft: 65536  hard: 65536  cap_add:  - IPC_LOCK  volumes:  - elasticsearch_data:/usr/share/elasticsearch/data  ports:  - 9200:9200  - 9300:9300   kibana:  image: docker.</description>
    </item>
    
    <item>
      <title>SonarQube in Docker</title>
      <link>https://thomastrinn.github.io/blog/posts/sonarqube-in-docker/</link>
      <pubDate>Fri, 06 Aug 2021 07:54:46 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/sonarqube-in-docker/</guid>
      <description>A SonarQube egy kód minőség elemző eszköz.
SonarQube futtatása docker-compose service-ként docker-compose.yml:
version: &amp;#34;3&amp;#34;  services:  sonarqube:  image: sonarqube:8.9-community  container_name: sonarqube  depends_on:  - db  ulimits:  memlock:  soft: -1  hard: -1  nofile:  soft: 65536  hard: 65536  environment:  SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar  SONAR_JDBC_USERNAME: sonar  SONAR_JDBC_PASSWORD: sonar  volumes:  - sonarqube_data:/opt/sonarqube/data  - sonarqube_extensions:/opt/sonarqube/extensions  - sonarqube_logs:/opt/sonarqube/logs  ports:  - &amp;#34;9010:9000&amp;#34;  db:  image: postgres:12  container_name: sonarqube-postgres  environment:  POSTGRES_USER: sonar  POSTGRES_PASSWORD: sonar  ports:  - 14432:5432  volumes:  - postgresql:/var/lib/postgresql  - postgresql_data:/var/lib/postgresql/data  volumes:  sonarqube_data:  sonarqube_extensions:  sonarqube_logs:  postgresql:  postgresql_data: SonarQube indítása: docker-compose up -d</description>
    </item>
    
    <item>
      <title>PostgreSQL in Docker</title>
      <link>https://thomastrinn.github.io/blog/posts/postgresql-in-docker/</link>
      <pubDate>Wed, 04 Aug 2021 08:04:34 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/postgresql-in-docker/</guid>
      <description>PostgreSQL server könnyen indítható docker container segítségével. A container létrehozását docker-compose segítségével végzem.
PostgreSQL docker-compose service Ahhoz, hogy docker-compose segítségével hozzunk létre a postgresql docker containert két fájlra lesz szükségünk. Az egyik a .env fájl a másik a docker-compose.yml.
A .env fájl nem kötelező, de praktikus, itt környezeti változókat definiálhatunk, amelyeket a docker-compose.yml fájlban fel tudunk használni.
A docker-compose.yml fájlban definiáljuk a service-ket a volumes-eket. Jelen esetben csak egy service-t definiálunk, a postgresql-t.</description>
    </item>
    
    <item>
      <title>Linux Systemd Journal</title>
      <link>https://thomastrinn.github.io/blog/posts/linux-systemd-journal/</link>
      <pubDate>Tue, 03 Aug 2021 14:27:25 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/linux-systemd-journal/</guid>
      <description>Journal mérete A journal a /var/log/journal/ könyvtárba hozza létre a log fájlokat, amik idővel sok helyet foglalhatnak. Ennek határt szabhatunk.
A /etc/systemd/journald.conf fájlban a SystemMaxUse változónak értéket adhatunk:
SystemMaxUse=50M A config fájl módosítását követően a journal service-t újra kell indítanunk, hogy a változtatások érvényesüljenek:
systemctl restart systemd-journald Hibák megtekintése Az alábbi paranccsal a log-ban levő hibákat tekinthetjük meg:
journalctl -r -p 3 További részletek: arch wiki journal</description>
    </item>
    
  </channel>
</rss>
