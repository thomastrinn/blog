<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog</title>
    <link>https://thomastrinn.github.io/blog/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Dec 2021 12:27:41 +0100</lastBuildDate><atom:link href="https://thomastrinn.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raspberry Pi 3 - Part 10 Server Monitoring Part 6 - Grafana Alerts</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-10-server-monitoring-part-06-grafana-alerts/</link>
      <pubDate>Thu, 23 Dec 2021 12:27:41 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-10-server-monitoring-part-06-grafana-alerts/</guid>
      <description>Riasztások segítségével értesülhetünk arról, ha valami probléma lépett fel a rendszerünkben.
A Grafana lehetőséget biztosít riasztások létrehozására. A hivatalos dokumentáció segítségével könnyedén létre tudtam hozni riasztásokat. Úgynevezett alert rule-t kell definiálni, ami áll egy query-ből, ami meghatározza azt az értéket, amit figyelni kívánunk és áll egy condition-ből, amiben a feltételt határozhatjuk meg a riasztáshoz.
Ahhoz, hogy a riasztásról értesülhessek a Gotify message server-t használtam. Ez biztosít egy web-es felületet a message-ek megjelenítésére, illetve van android alkalmazás is hozzá.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 9: Server Monitoring Part 5 - Container Logs</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-09-server-monitoring-part-05-container-logs/</link>
      <pubDate>Sun, 05 Dec 2021 16:23:52 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-09-server-monitoring-part-05-container-logs/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a docker container logok gyűjtésével és megjelenítésével foglalkozom.
Docker container logok gyűjtése A container logok helye: /var/lib/docker/&amp;lt;container-id&amp;gt;/&amp;lt;container-id&amp;gt;-json.log
Ahol a &amp;lt;container-id&amp;gt; a docker container-ek egyedi azonosítója.
A docker container logok gyűjtéséhez a Promtail service számára a /var/lib/docker könyvtárat kell volume-ként becsatolni:
promtail: image: grafana/promtail:latest container_name: promtail command: -config.file=/etc/promtail/config.yml volumes: - ./promtail/promtail-config.yml:/etc/promtail/config.yml - /var/log:/var/log:ro - /var/lib/docker/:/var/lib/docker:ro restart: unless-stopped Így a promtail container eléri a host docker log-jait és most már be tudjuk állítani, hogy a promtail a /var/lib/docker/containers/*/*log fájlokat figyelve a logokat elküldje a Loki-nak.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 8: Server Monitoring Part 4 - System Logs</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-08-server-monitoring-part-04-system-logs/</link>
      <pubDate>Sun, 05 Dec 2021 09:30:06 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-08-server-monitoring-part-04-system-logs/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a linux host system log gyűjtésével és megjelenítésével foglalkozom.
System log gyűjtése A system log gyűjtéséhez a Promtail service számára a linux host /var/log könyvtárát kell volume-ként becsatolni. Az eredeti docker-compose promtail service ezzel kiegészítve az alábbi:
promtail: image: grafana/promtail:latest container_name: promtail command: -config.file=/etc/promtail/config.yml volumes: - ./promtail/promtail-config.yml:/etc/promtail/config.yml - /var/log:/var/log:ro restart: unless-stopped Így a promtail container eléri a host system log-jait és most már be tudjuk állítani, hogy a promtail a /var/log könyvtárat figyelve a logokat elküldje a Loki-nak.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 7: Server Monitoring Part 3 - Container Metrics</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-07-server-monitoring-part-03-container-metrics/</link>
      <pubDate>Sat, 04 Dec 2021 11:17:00 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-07-server-monitoring-part-03-container-metrics/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a futó docker containerek erőforrás igényeit szeretném kinyerni és megjeleníteni.
Docker daemon Van lehetőség közvetlenül a docker daemon-ból kinyerni metric adatokat, a hivatalos docker dokumentációban találtam leírást hozzá. Jelenleg még fejlesztés alatt van, így csak experimental módban lehet használni.
A /etc/docker/daemon.json fájlban adható meg a metric végpont engedélyezése:
{ &amp;#34;metrics-addr&amp;#34; : &amp;#34;127.0.0.1:9323&amp;#34;, &amp;#34;experimental&amp;#34; : true } Ahhoz, hogy érvényesüljön a beállítás újra kell indítani a docker daemon-t:</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 6: Server Monitoring Part 2 - System Metrics</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-06-server-monitoring-part-02-system-metrics/</link>
      <pubDate>Mon, 29 Nov 2021 19:16:40 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-06-server-monitoring-part-02-system-metrics/</guid>
      <description>A Server Monitoring sorozat folytatásaként most a hardware és os metric adatok gyűjtésével és megjelenítésével foglalkozom.
System metric adatok elérése A Prometheus egyik hivatalos metric exporter-je a Node exporter , amely pont megfelel céljaim számára.
A node exporter futtatható docker container-ként és docker-compose service-ként az alábbi módon hoztam létre:
node_exporter: image: quay.io/prometheus/node-exporter:latest container_name: node_exporter command: --path.rootfs=/host pid: host ports: - &amp;#34;9100:9100&amp;#34; volumes: - /:/host:ro,rslave restart: unless-stopped amelyet a grafana-stack docker-compose.yml fájlba vettem fel, hogy egy docker network-on legyen a stack többi részével.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 5: Server Monitoring Part 1 - Grafana Stack</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-05-server-monitoring-part-01-grafana-stack/</link>
      <pubDate>Mon, 29 Nov 2021 19:14:12 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-05-server-monitoring-part-01-grafana-stack/</guid>
      <description>A Raspberry Pi server monitorozását a Grafana Labs eszközeivel kívánom megoldani.
A célom a rendszer és a docker container-ek monitorozása, az adatok megjelenítése grafikonokon - úgynevezett dashboard-on -, a rendszer és docker container logok egységes kezelése, riasztások küldése nem kívánt állapotok esetén.
A Grafana Labs főbb eszközei:
 Grafana: metric adat vizualizáló, kereső és riszasztás kezelő rendszer Prometheus: metric adatokat gyűjtő és tároló rendszer Loki: log aggregáló rendszer Promtail: agent, amely logokat továbbít Loki-nak.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 4: Docker Container Auto Update</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-04-docker-container-auto-update/</link>
      <pubDate>Mon, 22 Nov 2021 17:09:29 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-04-docker-container-auto-update/</guid>
      <description>Docker container-ben futó alkalmazásokat nem tudunk update-elni, mivel a docker container-ek immutable-ek. Ahhoz, hogy az alkalmazás újabb verzióját használhassuk szükségünk van egy docker image-re, amely tartalmazza az új verziót és a container-ünket törölnünk kell, majd az új image-el újra létre kell hoznunk.
Watchtower A watchtower segítségével automatizálhatjuk a docker container-jeink update-elési folyamatát.
A watchtower monitorozza a futó Docker container-jeinket, hogy a container-ek alapjáúl szolgáló image-k változtak-e. Ha úgy érzékeli, hogy volt változás, akkor automatikusan újraindítja az érintett containereket az új image-ekre épülve, megtartva az eredeti beállításokat (portok, stb.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 3: Install docker and docker-compose</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-03-install-docker/</link>
      <pubDate>Sun, 21 Nov 2021 16:29:28 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-03-install-docker/</guid>
      <description>Előfeltételek A docker telepítése előtt a Raspberry Pi 3 Model B+ esetében szükséges az alábbi cgroups beállításokkal kiegészíteni a /boot/cmdline.txt fájlt:
cgroup_enable=memory cgroup_memory=1 cgroup_enable=cpuset swapaccount=1 A módosítást követően újra kell indítsuk a pi-t, hogy érvényesüljenek a kernel módosítások:
sudo reboot Újraindulást követően a sudo cat /proc/cgroups eredményeként látnunk kell a cpuset és memory-t a listán.
Docker telepítése Követve a hivatalos dokumentációt Raspbian esetén a convenience script segítségével telepíthetjük a Docker Engine-t.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 2: Auto update</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-02-auto-update/</link>
      <pubDate>Sun, 21 Nov 2021 14:04:04 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-02-auto-update/</guid>
      <description>Debian alapú rendszerek esetén az unattended-upgrades csomag biztosít lehetőséget update-ek automatikus futtatására.
Telepítés sudo apt-get install unattended-upgrades apt-listchanges -y Beállítások Az unattended-upgrades beállításait az /etc/apt/apt.conf.d/50unattended-upgrades fájl tartalmazza.
Lehetőségünk van beállítani az automatikus újraindítást, ha az update után az szükséges:
Unattended-Upgrade::Automatic-Reboot &amp;quot;true&amp;quot;; Unattended-Upgrade::Automatic-Reboot-Time &amp;quot;03:00&amp;quot;; Továbbá lehetőségünk van e-mail értesítést is küldeni az alábbi két sorral:
Unattended-Upgrade::Mail &amp;quot;user@example.com&amp;quot;; Unattended-Upgrade::MailReport &amp;quot;on-change&amp;quot;; De ez csak akkor fog működni, ha a rendszer tud e-mail-t küldeni, ehhez pedig egy olyan tool-ra van szükségünk, ami a mailx package-t támogatja.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - Part 1: Setup</title>
      <link>https://thomastrinn.github.io/blog/posts/pi3-server-part-01-setup/</link>
      <pubDate>Tue, 09 Nov 2021 20:08:03 +0100</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/pi3-server-part-01-setup/</guid>
      <description>Az OS telepítése A célom hogy headless módon használhassam a pi-t, így nincs szükségem desktop enviromentre. Követve a hivatalos getting started leírást, az OS-t a Raspberry Pi Imager segítségével telepítem.
Miután az SD kártyát a számítógépemhez csatlakoztattam az RP Imager-ben OS-ként nem a default beállítást választottam, hanem az other opció alatt elérhető DE nélküli változatot (ebből két verzió létezik: Lite és Full, az utóbbit választottam).
Az Advanced Options segítségével be tudtam állítani a wifi-t, a locale beállításokat és az ssh-t.</description>
    </item>
    
    <item>
      <title>Get Started With Docker Compose</title>
      <link>https://thomastrinn.github.io/blog/posts/get-started-with-docker-compose/</link>
      <pubDate>Fri, 06 Aug 2021 08:23:05 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/get-started-with-docker-compose/</guid>
      <description>A Docker Compose egy olyan eszköz, aminek segítségével definiálni és elindítani tudunk több docker container-t.
Docker Compose fájlok A docker-compose.yml fájl tartalmazza azon service-eket amelyeket docker container-ként akarunk futtatni.
A .env fájl nem kötelező, de ha használjuk, akkor környezeti változókat tartalmazhat, amelyek a docker-compose.yml fájlban behivatkozhatóak. További részletek itt találhatóak.
Rendelkezésre állnak előre definiált környezeti változók, amelyekkel finomhangolhatjuk a Docker Compose működését. Az egyik ilyen környezeti változó a COMPOSE_PROJECT_NAME, amellyel a projektünk nevét adhatjuk meg, amit a docker-compose utána felhasznál prefixként a létrehozandó container-ek, volume-ok, network-ok nevéhez.</description>
    </item>
    
    <item>
      <title>Elasticsearch in Docker</title>
      <link>https://thomastrinn.github.io/blog/posts/elasticsearch-in-docker/</link>
      <pubDate>Fri, 06 Aug 2021 08:09:59 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/elasticsearch-in-docker/</guid>
      <description>Az alábbi docker-compose.yml fájl egy elasticsearch és egy elastickibana service-t indít el.
version: &amp;#39;3&amp;#39; services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3 container_name: ebla_elasticsearch environment: - xpack.security.enabled=false - discovery.type=single-node ulimits: memlock: soft: -1 hard: -1 nofile: soft: 65536 hard: 65536 cap_add: - IPC_LOCK volumes: - elasticsearch_data:/usr/share/elasticsearch/data ports: - 9200:9200 - 9300:9300 kibana: image: docker.elastic.co/kibana/kibana:7.9.3 container_name: ebla_kibana environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 ports: - 5601:5601 depends_on: - elasticsearch volumes: elasticsearch_data: driver: local Ezen beállítások development környezetre ajánlatosak, production esetén ez kerülendő.</description>
    </item>
    
    <item>
      <title>SonarQube in Docker</title>
      <link>https://thomastrinn.github.io/blog/posts/sonarqube-in-docker/</link>
      <pubDate>Fri, 06 Aug 2021 07:54:46 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/sonarqube-in-docker/</guid>
      <description>A SonarQube egy kód minőség elemző eszköz.
SonarQube futtatása docker-compose service-ként docker-compose.yml:
version: &amp;#34;3&amp;#34; services: sonarqube: image: sonarqube:8.9-community container_name: sonarqube depends_on: - db ulimits: memlock: soft: -1 hard: -1 nofile: soft: 65536 hard: 65536 environment: SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar SONAR_JDBC_USERNAME: sonar SONAR_JDBC_PASSWORD: sonar volumes: - sonarqube_data:/opt/sonarqube/data - sonarqube_extensions:/opt/sonarqube/extensions - sonarqube_logs:/opt/sonarqube/logs ports: - &amp;#34;9010:9000&amp;#34; db: image: postgres:12 container_name: sonarqube-postgres environment: POSTGRES_USER: sonar POSTGRES_PASSWORD: sonar ports: - 14432:5432 volumes: - postgresql:/var/lib/postgresql - postgresql_data:/var/lib/postgresql/data volumes: sonarqube_data: sonarqube_extensions: sonarqube_logs: postgresql: postgresql_data: SonarQube indítása: docker-compose up -d</description>
    </item>
    
    <item>
      <title>PostgreSQL in Docker</title>
      <link>https://thomastrinn.github.io/blog/posts/postgresql-in-docker/</link>
      <pubDate>Wed, 04 Aug 2021 08:04:34 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/postgresql-in-docker/</guid>
      <description>PostgreSQL server könnyen indítható docker container segítségével. A container létrehozását docker-compose segítségével végzem.
PostgreSQL docker-compose service Ahhoz, hogy docker-compose segítségével hozzunk létre a postgresql docker containert két fájlra lesz szükségünk. Az egyik a .env fájl a másik a docker-compose.yml.
A .env fájl nem kötelező, de praktikus, itt környezeti változókat definiálhatunk, amelyeket a docker-compose.yml fájlban fel tudunk használni.
A docker-compose.yml fájlban definiáljuk a service-ket a volumes-eket. Jelen esetben csak egy service-t definiálunk, a postgresql-t.</description>
    </item>
    
    <item>
      <title>Linux Systemd Journal</title>
      <link>https://thomastrinn.github.io/blog/posts/linux-systemd-journal/</link>
      <pubDate>Tue, 03 Aug 2021 14:27:25 +0200</pubDate>
      
      <guid>https://thomastrinn.github.io/blog/posts/linux-systemd-journal/</guid>
      <description>Journal mérete A journal a /var/log/journal/ könyvtárba hozza létre a log fájlokat, amik idővel sok helyet foglalhatnak. Ennek határt szabhatunk.
A /etc/systemd/journald.conf fájlban a SystemMaxUse változónak értéket adhatunk:
SystemMaxUse=50M A config fájl módosítását követően a journal service-t újra kell indítanunk, hogy a változtatások érvényesüljenek:
systemctl restart systemd-journald Hibák megtekintése Az alábbi paranccsal a log-ban levő hibákat tekinthetjük meg:
journalctl -r -p 3 További részletek: arch wiki journal</description>
    </item>
    
    
  </channel>
</rss>
