[{"content":"A SonarQube egy kód minőség elemző eszköz.\nSonarQube futtatása docker-compose service-ként docker-compose.yml:\nversion: \u0026#34;3\u0026#34; services: sonarqube: image: sonarqube:8.9-community container_name: sonarqube depends_on: - db ulimits: memlock: soft: -1 hard: -1 nofile: soft: 65536 hard: 65536 environment: SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar SONAR_JDBC_USERNAME: sonar SONAR_JDBC_PASSWORD: sonar volumes: - sonarqube_data:/opt/sonarqube/data - sonarqube_extensions:/opt/sonarqube/extensions - sonarqube_logs:/opt/sonarqube/logs ports: - \u0026#34;9010:9000\u0026#34; db: image: postgres:12 container_name: sonarqube-postgres environment: POSTGRES_USER: sonar POSTGRES_PASSWORD: sonar ports: - 14432:5432 volumes: - postgresql:/var/lib/postgresql - postgresql_data:/var/lib/postgresql/data volumes: sonarqube_data: sonarqube_extensions: sonarqube_logs: postgresql: postgresql_data: SonarQube indítása: docker-compose up -d\nMivel a SonarQube embedded Elasticserch-t használ szükség lehet a host gépen a következő beállításra:\nsysctl -w vm.max_map_count=524288 Ha még így is gond volna, akkor a SonarQube Docker Hub oldalból induljál ki.\nSikeres indítás követően az alkalmazás elérhető a http://localhost:9010/ url-en.\nBelépni admin/admin segítségével lehet.\nSonar Scanner futtatása docker container-ből Ha sonar-scanner-t kell futtatnunk a projektünk forráskódján, akkor azt is megtehetjük docker container-ből, az alábbi módon:\ndocker run --rm \\  --net host \\  -v \u0026#34;$(pwd):/usr/src\u0026#34; \\  sonarsource/sonar-scanner-cli \\  -Dsonar.projectKey=\u0026lt;your-projectKey\u0026gt; \\  -Dsonar.host.url=\u0026lt;your-sonar-host\u0026gt; \\  -Dsonar.login=\u0026lt;your-login\u0026gt; A -v \u0026quot;$(pwd):/usr/src\u0026quot; azt a mapping-et mutatja, hogy ha a forráskódunk könyvtárában adjuk ki ezt a parancsot, akkor az a container /usr/src könyvtárára mutat, amelyben a sonar-scanner keresi a forráskódot.\nA -Dsonar.* paraméterek értékét meg a sonarqube oldal a project létrehozásakor megad nekünk, s azokat kell ide behelyettesítenünk.\n","permalink":"https://thomastrinn.github.io/blog/posts/sonarqube-in-docker/","summary":"A SonarQube egy kód minőség elemző eszköz.\nSonarQube futtatása docker-compose service-ként docker-compose.yml:\nversion: \u0026#34;3\u0026#34; services: sonarqube: image: sonarqube:8.9-community container_name: sonarqube depends_on: - db ulimits: memlock: soft: -1 hard: -1 nofile: soft: 65536 hard: 65536 environment: SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar SONAR_JDBC_USERNAME: sonar SONAR_JDBC_PASSWORD: sonar volumes: - sonarqube_data:/opt/sonarqube/data - sonarqube_extensions:/opt/sonarqube/extensions - sonarqube_logs:/opt/sonarqube/logs ports: - \u0026#34;9010:9000\u0026#34; db: image: postgres:12 container_name: sonarqube-postgres environment: POSTGRES_USER: sonar POSTGRES_PASSWORD: sonar ports: - 14432:5432 volumes: - postgresql:/var/lib/postgresql - postgresql_data:/var/lib/postgresql/data volumes: sonarqube_data: sonarqube_extensions: sonarqube_logs: postgresql: postgresql_data: SonarQube indítása: docker-compose up -d","title":"SonarQube in Docker"},{"content":"PostgreSQL server könnyen indítható docker container segítségével. A container létrehozását docker-compose segítségével végzem.\nPostgreSQL docker-compose service Ahhoz, hogy docker-compose segítségével hozzunk létre a postgresql docker containert két fájlra lesz szükségünk. Az egyik a .env fájl a másik a docker-compose.yml.\nA .env fájl nem kötelező, de praktikus, itt környezeti változókat definiálhatunk, amelyeket a docker-compose.yml fájlban fel tudunk használni.\nA docker-compose.yml fájlban definiáljuk a service-ket a volumes-eket. Jelen esetben csak egy service-t definiálunk, a postgresql-t.\nA .env fájl tartalma:\nCOMPOSE_PROJECT_NAME=postgres POSTGRES_PASSWORD=postgres POSTGRES_USER=postgres POSTGRES_DB=postgres A COMPOSE_PROJECT_NAME környezeti változóval a project nevét adhatjuk meg, részleteket itt olvashatunk.\nA többi környezeti változót pedig a postgresql service fogja felhasználni.\nA docker-compose.yml fájl tartalma:\nversion: \u0026#39;3.8\u0026#39; services: postgres: image: postgres:12 container_name: postgres environment: - POSTGRES_USER=${POSTGRES_USER} - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} - POSTGRES_DB=${POSTGRES_DB} command: postgres -c max_connections=150 volumes: - postgres:/var/lib/postgresql/data ports: - 5432:5432 volumes: postgres: driver: local A .env-ben definiált környezeti változókat itt az enviroment: szakaszban használjuk fel, adjuk át a container-nek induláskor.\nEgy postgres nevű volume-ot definiálunk, ami a container-ben levő /var/lib/postgresql/data könyvtárra mutat. Így azét érjük el, hogy a container törlése után a postgres adatok megmaradnak és a container újra létrehozását követően meglesznek az adatbázis adatok.\nA container-ben futó postgre adatbázis beállítását a command: résznél végezhetjük el, a postgres -c \u0026lt;param1=value1\u0026gt; -c \u0026lt;param2=value2\u0026gt; parancsot megadva. A fenti esetben a max_connections értékét adjuk meg (alap értéke 100).\nKiterjedtebb leírást a postgres dockerhub oldalon találunk.\nPostgreSQL tuning Egy adott környezetre a beállítások testreszabása érdekében a következő két forrást tudom javasolni:\n Tuning your PostgreSQL Server: részletes leírása az egyes beállításoknak PGTune: egyszerű eszköz amivel könnyedén előállíthatjuk a config értékeket.  ","permalink":"https://thomastrinn.github.io/blog/posts/postgresql-in-docker/","summary":"PostgreSQL server könnyen indítható docker container segítségével. A container létrehozását docker-compose segítségével végzem.\nPostgreSQL docker-compose service Ahhoz, hogy docker-compose segítségével hozzunk létre a postgresql docker containert két fájlra lesz szükségünk. Az egyik a .env fájl a másik a docker-compose.yml.\nA .env fájl nem kötelező, de praktikus, itt környezeti változókat definiálhatunk, amelyeket a docker-compose.yml fájlban fel tudunk használni.\nA docker-compose.yml fájlban definiáljuk a service-ket a volumes-eket. Jelen esetben csak egy service-t definiálunk, a postgresql-t.","title":"PostgreSQL in Docker"},{"content":"Journal mérete A journal a /var/log/journal/ könyvtárba hozza létre a log fájlokat, amik idővel sok helyet foglalhatnak. Ennek határt szabhatunk.\nA /etc/systemd/journald.conf fájlban a SystemMaxUse változónak értéket adhatunk:\nSystemMaxUse=50M A config fájl módosítását követően a journal service-t újra kell indítanunk, hogy a változtatások érvényesüljenek:\nsystemctl restart systemd-journald Hibák megtekintése Az alábbi paranccsal a log-ban levő hibákat tekinthetjük meg:\njournalctl -r -p 3 További részletek: arch wiki journal\n","permalink":"https://thomastrinn.github.io/blog/posts/linux-systemd-journal/","summary":"Journal mérete A journal a /var/log/journal/ könyvtárba hozza létre a log fájlokat, amik idővel sok helyet foglalhatnak. Ennek határt szabhatunk.\nA /etc/systemd/journald.conf fájlban a SystemMaxUse változónak értéket adhatunk:\nSystemMaxUse=50M A config fájl módosítását követően a journal service-t újra kell indítanunk, hogy a változtatások érvényesüljenek:\nsystemctl restart systemd-journald Hibák megtekintése Az alábbi paranccsal a log-ban levő hibákat tekinthetjük meg:\njournalctl -r -p 3 További részletek: arch wiki journal","title":"Linux Systemd Journal"}]